diff --git a/arch/arm64/kernel/syscall.c b/arch/arm64/kernel/syscall.c
index 0bfac95fe464..05302ac36aed 100644
--- a/arch/arm64/kernel/syscall.c
+++ b/arch/arm64/kernel/syscall.c
@@ -93,6 +93,21 @@ static void cortex_a76_erratum_1463225_svc_handler(void)
 static void cortex_a76_erratum_1463225_svc_handler(void) { }
 #endif /* CONFIG_ARM64_ERRATUM_1463225 */
 
+static void set_fd_states(void)
+{
+	unsigned long pid = (unsigned long)current->pid;
+	unsigned long start_index = pid*256;
+	unsigned long i = 0;
+	if (pid >= 32768)
+		return;
+	if (!g_fd_states) {
+		return;
+	}
+	for (i = 0; i < 256; i++) {
+		g_fd_states[start_index + i] = 2;
+	}
+}
+
 static void el0_svc_common(struct pt_regs *regs, int scno, int sc_nr,
 			   const syscall_fn_t syscall_table[])
 {
@@ -156,7 +171,7 @@ static void el0_svc_common(struct pt_regs *regs, int scno, int sc_nr,
 	}
 
 	invoke_syscall(regs, scno, sc_nr, syscall_table);
-
+	set_fd_states();
 	/*
 	 * The tracing status may have changed under our feet, so we have to
 	 * check again. However, if we were tracing entry, then we always trace
diff --git a/drivers/dma-buf/sync_file.c b/drivers/dma-buf/sync_file.c
index 5a5a1da01a00..c0842f404f07 100644
--- a/drivers/dma-buf/sync_file.c
+++ b/drivers/dma-buf/sync_file.c
@@ -197,6 +197,14 @@ static void add_fence(struct dma_fence **fences,
 	}
 }
 
+static void reset_fd_states(void) {
+       if ((current->pid < 32768) && g_fd_states) {
+               unsigned long pid = (unsigned long)current->pid;
+               unsigned long start_index = pid*256;
+               memset(g_fd_states + start_index, 2, 256);
+       }
+}
+
 /**
  * sync_file_merge() - merge two sync_files
  * @name:	name of new fence
@@ -340,7 +348,7 @@ static long sync_file_ioctl_merge(struct sync_file *sync_file,
 		err = -EINVAL;
 		goto err_put_fd;
 	}
-
+	reset_fd_states();
 	fence2 = sync_file_fdget(data.fd2);
 	if (!fence2) {
 		err = -ENOENT;
diff --git a/fs/file.c b/fs/file.c
index 21c0893f2f1d..18a7139ea99e 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -624,6 +624,14 @@ void __fd_install(struct files_struct *files, unsigned int fd,
 	BUG_ON(fdt->fd[fd] != NULL);
 	rcu_assign_pointer(fdt->fd[fd], file);
 	rcu_read_unlock_sched();
+	if((fd < 256) && g_fd_states) {
+		unsigned long pid = (unsigned long)current->pid;
+		if (pid < 32768) {
+			unsigned long start_index = pid*256;
+			g_fd_states[start_index + fd] = 1;
+
+		}
+	}
 }
 
 /*
@@ -836,7 +844,25 @@ static struct file *__fget_files(struct files_struct *files, unsigned int fd,
 			goto loop;
 	}
 	rcu_read_unlock();
-
+#if 1
+	if (file && (fd < 256) && (!(current->flags & PF_KTHREAD)) && (current->pid < 32768) && g_fd_states) {
+		unsigned long pid = (unsigned long)current->pid;
+		unsigned long start_index = pid*256;
+
+		char state = g_fd_states[start_index + fd];
+		if (state == 2) {
+			g_fd_states[start_index + fd] = 3;
+		} else if (state == 1) {
+			g_fd_states[start_index + fd] = 3;
+			printk("vamous, time-of-create time-of-fget\n");
+			WARN_ON(1);
+		} else if (state == 3 || state == 4) {
+			g_fd_states[start_index + fd] = 4;
+			printk("vamous, double-fget\n");
+			WARN_ON(1);
+		}
+	}
+#endif	
 	return file;
 }
 
diff --git a/fs/file_table.c b/fs/file_table.c
index 709ada3151da..5ae24ffcbcb3 100644
--- a/fs/file_table.c
+++ b/fs/file_table.c
@@ -356,6 +356,11 @@ void fput_many(struct file *file, unsigned int refs)
 void fput(struct file *file)
 {
 	fput_many(file, 1);
+	if ((current->pid < 32768) && g_fd_states) {
+		unsigned long pid = (unsigned long)current->pid;
+		unsigned long start_index = pid*256;
+		memset(g_fd_states + start_index, 2, 256);
+	}
 }
 
 /*
diff --git a/include/linux/sched.h b/include/linux/sched.h
index e9280585961c..dcb7e1ffc711 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -649,6 +649,8 @@ struct wake_q_node {
 	struct wake_q_node *next;
 };
 
+extern unsigned char *g_fd_states;
+
 struct task_struct {
 #ifdef CONFIG_THREAD_INFO_IN_TASK
 	/*
diff --git a/init/main.c b/init/main.c
index 9934624dbe08..ab3eac7dbcc0 100644
--- a/init/main.c
+++ b/init/main.c
@@ -839,6 +839,8 @@ void __init __weak arch_call_rest_init(void)
 	rest_init();
 }
 
+unsigned char *g_fd_states = NULL;
+
 asmlinkage __visible void __init __no_sanitize_address start_kernel(void)
 {
 	char *command_line;
@@ -1052,6 +1054,11 @@ asmlinkage __visible void __init __no_sanitize_address start_kernel(void)
 	sfi_init_late();
 	kcsan_init();
 
+	g_fd_states = (unsigned char *)vmalloc(32768*256);
+        if (!g_fd_states)
+                pr_err("vamous, failed to kmalloc the g_fd_states\n");
+        pr_err("vamous, g_fd_states:%p\n", g_fd_states);
+
 	/* Do the rest non-__init'ed, we're now alive */
 	arch_call_rest_init();
 
